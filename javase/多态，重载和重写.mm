{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"B7FCH","rootPoint":{"objectClass":"CGPoint","x":276.5,"y":744.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"4878P","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"3YZ7W","lineColorHex":"#DC306C","text":"1 多态的一种体现"},"1":{"objectClass":"MindNode","ID":"CC4UX","lineColorHex":"#DC306C","text":"2 静态的，在编译阶段决定"},"2":{"objectClass":"MindNode","ID":"8FLCR","lineColorHex":"#DC306C","text":"3 方法明一样，形参列表不同，（参数的个数，类型，顺序）"},"3":{"objectClass":"MindNode","ID":"66X3O","lineColorHex":"#DC306C","text":"4  返回值和权限修饰符无关，没用的"},"objectClass":"NSArray"},"text":"重载"},"1":{"objectClass":"MindNode","ID":"415G8","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"48PL6","lineColorHex":"#BF58F5","text":"1 方法名相同"},"1":{"objectClass":"MindNode","ID":"YF157","lineColorHex":"#BF58F5","text":"2 形参列表形同（参数的类型，个数，顺序）","markType":4},"2":{"objectClass":"MindNode","ID":"8MDV5","lineColorHex":"#BF58F5","text":"3 返回值小于，等于父类"},"3":{"objectClass":"MindNode","ID":"Q16DU","lineColorHex":"#BF58F5","text":"4 异常，小于等于父类"},"4":{"objectClass":"MindNode","ID":"K3BSL","lineColorHex":"#BF58F5","text":"5 权限修饰符，大于等于父类"},"5":{"objectClass":"MindNode","ID":"CF6EF","lineColorHex":"#BF58F5","text":"6 动态运行的时候决定的，静态是重摘"},"objectClass":"NSArray"},"text":"重写"},"2":{"objectClass":"MindNode","ID":"REE5S","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"5VC77","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"8C6U5","lineColorHex":"#26BBFF","text":"1  同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果，这就是多态性。简单的说:就是用基类的引用指向子类的对象。"},"1":{"objectClass":"MindNode","ID":"K62NO","lineColorHex":"#26BBFF","text":"2  子类重写父类方法，然后用父类引用指向子类对象，调用方法时候会进行动态绑定，这就是多态"},"2":{"objectClass":"MindNode","ID":"3261T","lineColorHex":"#26BBFF","text":"3  面向对象语言中，接口的多种不同的实现方式即为多态"},"objectClass":"NSArray"},"text":"概念"},"1":{"objectClass":"MindNode","ID":"26Y46","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"4UV83","lineColorHex":"#26BBFF","text":"1 ctrl+D在eclipse是删除，\n然而在IDEA是复制"},"objectClass":"NSArray"},"text":"demo"},"2":{"objectClass":"MindNode","ID":"IH338","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"8A4BM","lineColorHex":"#26BBFF","text":"1   应用程序不必为每一个派生类编写功能调用，只需要对抽象基类进行处理即可。大大提高程序的可复用性"},"1":{"objectClass":"MindNode","ID":"R252L","lineColorHex":"#26BBFF","text":"2  派生类的功能可以被基类的方法或引用变量所调用，这叫向后兼容，可以提高可扩充性和可维护性"},"2":{"objectClass":"MindNode","ID":"5Q904","lineColorHex":"#26BBFF","text":""},"objectClass":"NSArray"},"text":"作用"},"3":{"objectClass":"MindNode","ID":"SFZV1","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"WY473","lineColorHex":"#26BBFF","text":"1  我们将多态使用在方法的返回类型中"},"objectClass":"NSArray"},"text":"体现"},"4":{"objectClass":"MindNode","ID":"536TB","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"W5144","lineColorHex":"#26BBFF","text":"1 多态对程序的扩展具有非常大的作用"},"objectClass":"NSArray"},"text":"优势"},"objectClass":"NSArray"},"text":"啥是多态"},"objectClass":"NSArray"},"text":"重载和重写\n"}}